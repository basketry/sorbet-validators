# This code was generated by a tool.
# @basketry/sorbet-validators@{{version}}
#
# Changes to this file may cause incorrect behavior and will be lost if
# the code is regenerated.

# typed: strict

module BasketryExample::V1
  module Validators
    extend T::Sig

    sig do
      params(
        search: T.nilable(String)
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_get_gizmos_parameters(search:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(search).nil? && !T.unsafe(search).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"search" must be a String if supplied',
          path: 'search'
        )
      end

      validator_internal_errors
    end

    sig do
      params(
        size: T.nilable(BasketryExample::V1::Enums::CreateGizmoSize)
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_create_gizmo_parameters(size:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # local type check
      if !size.nil?
        validator_internal_errors.concat(validate_create_gizmo_size(size))
      end

      validator_internal_errors
    end

    sig do
      params(
        factors: T.nilable(T::Array[String])
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_update_gizmo_parameters(factors:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if factors.is_a?(Array) && factors.any? { |x| !x.is_a?(String) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "factors" must be a String if supplied',
          path: 'factors'
        )
      end

      # array-max-items
      if factors.is_a?(Array) && factors.length > 6
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'ARRAY_MAX_ITEMS',
          title: '"factors" max length is 6',
          path: 'factors'
        )
      end

      # array-min-items
      if factors.is_a?(Array) && factors.length < 2
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'ARRAY_MIN_ITEMS',
          title: '"factors" min length is 2',
          path: 'factors'
        )
      end

      # string-pattern
      if factors.is_a?(Array) && !factors.any? { |x| x.is_a?(String) && /[0-9a-fA-F]+/.match?(x) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_PATTERN',
          title: '"factors" must match the pattern /[0-9a-fA-F]+/',
          path: 'factors'
        )
      end

      validator_internal_errors
    end

    sig do
      params(
        body: T.nilable(BasketryExample::V1::Types::CreateWidgetBody)
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_create_widget_parameters(body:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # local type check
      if !body.nil?
        validator_internal_errors.concat(validate_create_widget_body(body))
      end

      validator_internal_errors
    end

    sig do
      params(
        id: String
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_get_widget_foo_parameters(id:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # required
      if T.unsafe(id).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"id" is required',
          path: 'id'
        )
      end

      # "non-local" type check
      if !T.unsafe(id).nil? && !T.unsafe(id).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"id" must be a String',
          path: 'id'
        )
      end

      # string-max-length
      if id.is_a?(String) && id.length > 30
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_MAX_LENGTH',
          title: '"id" max length is 30',
          path: 'id'
        )
      end

      validator_internal_errors
    end

    sig do
      params(
        id: String
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_delete_widget_foo_parameters(id:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # required
      if T.unsafe(id).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"id" is required',
          path: 'id'
        )
      end

      # "non-local" type check
      if !T.unsafe(id).nil? && !T.unsafe(id).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"id" must be a String',
          path: 'id'
        )
      end

      # string-max-length
      if id.is_a?(String) && id.length > 30
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_MAX_LENGTH',
          title: '"id" max length is 30',
          path: 'id'
        )
      end

      validator_internal_errors
    end

    sig do
      params(
        string_no_format: T.nilable(String),
        string_date: T.nilable(Date),
        string_date_time: T.nilable(DateTime),
        integer_no_format: T.nilable(Integer),
        integer_int32: T.nilable(Integer),
        integer_int64: T.nilable(Integer),
        number_no_format: T.nilable(Numeric),
        number_float: T.nilable(Float),
        number_double: T.nilable(Float)
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_exhaustive_formats_parameters(string_no_format:, string_date:, string_date_time:, integer_no_format:, integer_int32:, integer_int64:, number_no_format:, number_float:, number_double:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(string_no_format).nil? && !T.unsafe(string_no_format).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"string_no_format" must be a String if supplied',
          path: 'string_no_format'
        )
      end

      # "non-local" type check
      if !T.unsafe(string_date).nil? && !T.unsafe(string_date).is_a?(Date)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"string_date" must be a Date if supplied',
          path: 'string_date'
        )
      end

      # "non-local" type check
      if !T.unsafe(string_date_time).nil? && !T.unsafe(string_date_time).is_a?(DateTime)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"string_date_time" must be a DateTime if supplied',
          path: 'string_date_time'
        )
      end

      # "non-local" type check
      if !T.unsafe(integer_no_format).nil? && !T.unsafe(integer_no_format).is_a?(Integer)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"integer_no_format" must be a Integer if supplied',
          path: 'integer_no_format'
        )
      end

      # "non-local" type check
      if !T.unsafe(integer_int32).nil? && !T.unsafe(integer_int32).is_a?(Integer)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"integer_int32" must be a Integer if supplied',
          path: 'integer_int32'
        )
      end

      # "non-local" type check
      if !T.unsafe(integer_int64).nil? && !T.unsafe(integer_int64).is_a?(Integer)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"integer_int64" must be a Integer if supplied',
          path: 'integer_int64'
        )
      end

      # "non-local" type check
      if !T.unsafe(number_no_format).nil? && !T.unsafe(number_no_format).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"number_no_format" must be a Numeric if supplied',
          path: 'number_no_format'
        )
      end

      # "non-local" type check
      if !T.unsafe(number_float).nil? && !T.unsafe(number_float).is_a?(Float)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"number_float" must be a Float if supplied',
          path: 'number_float'
        )
      end

      # "non-local" type check
      if !T.unsafe(number_double).nil? && !T.unsafe(number_double).is_a?(Float)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"number_double" must be a Float if supplied',
          path: 'number_double'
        )
      end

      validator_internal_errors
    end

    sig do
      params(
        query_string: T.nilable(String),
        query_enum: T.nilable(BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum),
        query_number: T.nilable(Numeric),
        query_integer: T.nilable(Integer),
        query_boolean: T.nilable(T::Boolean),
        query_string_array: T.nilable(T::Array[String]),
        query_enum_array: T.nilable(T::Array[BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray]),
        query_number_array: T.nilable(T::Array[Numeric]),
        query_integer_array: T.nilable(T::Array[Integer]),
        query_boolean_array: T.nilable(T::Array[T::Boolean]),
        path_string: String,
        path_enum: BasketryExample::V1::Enums::ExhaustiveParamsPathEnum,
        path_number: Numeric,
        path_integer: Integer,
        path_boolean: T::Boolean,
        path_string_array: T::Array[String],
        path_enum_array: T::Array[BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray],
        path_number_array: T::Array[Numeric],
        path_integer_array: T::Array[Integer],
        path_boolean_array: T::Array[T::Boolean],
        header_string: T.nilable(String),
        header_enum: T.nilable(BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum),
        header_number: T.nilable(Numeric),
        header_integer: T.nilable(Integer),
        header_boolean: T.nilable(T::Boolean),
        header_string_array: T.nilable(T::Array[String]),
        header_enum_array: T.nilable(T::Array[BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray]),
        header_number_array: T.nilable(T::Array[Numeric]),
        header_integer_array: T.nilable(T::Array[Integer]),
        header_boolean_array: T.nilable(T::Array[T::Boolean]),
        body: T.nilable(BasketryExample::V1::Types::ExhaustiveParamsBody)
      ).returns(
        T::Array[BasketryExample::V1::Types::ValidationError]
      )
    end
    def validate_exhaustive_params_parameters(query_string:, query_enum:, query_number:, query_integer:, query_boolean:, query_string_array:, query_enum_array:, query_number_array:, query_integer_array:, query_boolean_array:, path_string:, path_enum:, path_number:, path_integer:, path_boolean:, path_string_array:, path_enum_array:, path_number_array:, path_integer_array:, path_boolean_array:, header_string:, header_enum:, header_number:, header_integer:, header_boolean:, header_string_array:, header_enum_array:, header_number_array:, header_integer_array:, header_boolean_array:, body:)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(query_string).nil? && !T.unsafe(query_string).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"query_string" must be a String if supplied',
          path: 'query_string'
        )
      end

      # local type check
      if !query_enum.nil?
        validator_internal_errors.concat(validate_exhaustive_params_query_enum(query_enum))
      end

      # "non-local" type check
      if !T.unsafe(query_number).nil? && !T.unsafe(query_number).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"query_number" must be a Numeric if supplied',
          path: 'query_number'
        )
      end

      # "non-local" type check
      if !T.unsafe(query_integer).nil? && !T.unsafe(query_integer).is_a?(Integer)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"query_integer" must be a Integer if supplied',
          path: 'query_integer'
        )
      end

      # "non-local" type check
      if !T.unsafe(query_boolean).nil? && !T.unsafe(query_boolean).is_a?(TrueClass) && !T.unsafe(query_boolean).is_a?(FalseClass)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"query_boolean" must be a T::Boolean if supplied',
          path: 'query_boolean'
        )
      end

      # "non-local" type check
      if query_string_array.is_a?(Array) && query_string_array.any? { |x| !x.is_a?(String) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "query_string_array" must be a String if supplied',
          path: 'query_string_array'
        )
      end

      # local type check
      query_enum_array&.each { |x| validator_internal_errors.concat(validate_exhaustive_params_query_enum_array(x)) }

      # "non-local" type check
      if query_number_array.is_a?(Array) && query_number_array.any? { |x| !x.is_a?(Numeric) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "query_number_array" must be a Numeric if supplied',
          path: 'query_number_array'
        )
      end

      # "non-local" type check
      if query_integer_array.is_a?(Array) && query_integer_array.any? { |x| !x.is_a?(Integer) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "query_integer_array" must be a Integer if supplied',
          path: 'query_integer_array'
        )
      end

      # "non-local" type check
      if query_boolean_array.is_a?(Array) && query_boolean_array.any? { |x| !x.is_a?(TrueClass) && !x.is_a?(FalseClass) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "query_boolean_array" must be a T::Boolean if supplied',
          path: 'query_boolean_array'
        )
      end

      # required
      if T.unsafe(path_string).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_string" is required',
          path: 'path_string'
        )
      end

      # "non-local" type check
      if !T.unsafe(path_string).nil? && !T.unsafe(path_string).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"path_string" must be a String',
          path: 'path_string'
        )
      end

      # required
      if T.unsafe(path_enum).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_enum" is required',
          path: 'path_enum'
        )
      end

      # local type check
      if !T.unsafe(path_enum).nil?
        validator_internal_errors.concat(validate_exhaustive_params_path_enum(path_enum))
      end

      # required
      if T.unsafe(path_number).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_number" is required',
          path: 'path_number'
        )
      end

      # "non-local" type check
      if !T.unsafe(path_number).nil? && !T.unsafe(path_number).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"path_number" must be a Numeric',
          path: 'path_number'
        )
      end

      # required
      if T.unsafe(path_integer).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_integer" is required',
          path: 'path_integer'
        )
      end

      # "non-local" type check
      if !T.unsafe(path_integer).nil? && !T.unsafe(path_integer).is_a?(Integer)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"path_integer" must be a Integer',
          path: 'path_integer'
        )
      end

      # required
      if T.unsafe(path_boolean).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_boolean" is required',
          path: 'path_boolean'
        )
      end

      # "non-local" type check
      if !T.unsafe(path_boolean).nil? && !T.unsafe(path_boolean).is_a?(TrueClass) && !T.unsafe(path_boolean).is_a?(FalseClass)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"path_boolean" must be a T::Boolean',
          path: 'path_boolean'
        )
      end

      # required
      if T.unsafe(path_string_array).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_string_array" is required',
          path: 'path_string_array'
        )
      end

      # "non-local" type check
      if path_string_array.is_a?(Array) && path_string_array.any? { |x| !x.is_a?(String) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "path_string_array" must be a String',
          path: 'path_string_array'
        )
      end

      # required
      if T.unsafe(path_enum_array).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_enum_array" is required',
          path: 'path_enum_array'
        )
      end

      # local type check
      if !T.unsafe(path_enum_array).nil?
        path_enum_array.each { |x| validator_internal_errors.concat(validate_exhaustive_params_path_enum_array(x)) }
      end

      # required
      if T.unsafe(path_number_array).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_number_array" is required',
          path: 'path_number_array'
        )
      end

      # "non-local" type check
      if path_number_array.is_a?(Array) && path_number_array.any? { |x| !x.is_a?(Numeric) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "path_number_array" must be a Numeric',
          path: 'path_number_array'
        )
      end

      # required
      if T.unsafe(path_integer_array).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_integer_array" is required',
          path: 'path_integer_array'
        )
      end

      # "non-local" type check
      if path_integer_array.is_a?(Array) && path_integer_array.any? { |x| !x.is_a?(Integer) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "path_integer_array" must be a Integer',
          path: 'path_integer_array'
        )
      end

      # required
      if T.unsafe(path_boolean_array).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"path_boolean_array" is required',
          path: 'path_boolean_array'
        )
      end

      # "non-local" type check
      if path_boolean_array.is_a?(Array) && path_boolean_array.any? { |x| !x.is_a?(TrueClass) && !x.is_a?(FalseClass) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "path_boolean_array" must be a T::Boolean',
          path: 'path_boolean_array'
        )
      end

      # "non-local" type check
      if !T.unsafe(header_string).nil? && !T.unsafe(header_string).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"header_string" must be a String if supplied',
          path: 'header_string'
        )
      end

      # local type check
      if !header_enum.nil?
        validator_internal_errors.concat(validate_exhaustive_params_header_enum(header_enum))
      end

      # "non-local" type check
      if !T.unsafe(header_number).nil? && !T.unsafe(header_number).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"header_number" must be a Numeric if supplied',
          path: 'header_number'
        )
      end

      # "non-local" type check
      if !T.unsafe(header_integer).nil? && !T.unsafe(header_integer).is_a?(Integer)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"header_integer" must be a Integer if supplied',
          path: 'header_integer'
        )
      end

      # "non-local" type check
      if !T.unsafe(header_boolean).nil? && !T.unsafe(header_boolean).is_a?(TrueClass) && !T.unsafe(header_boolean).is_a?(FalseClass)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"header_boolean" must be a T::Boolean if supplied',
          path: 'header_boolean'
        )
      end

      # "non-local" type check
      if header_string_array.is_a?(Array) && header_string_array.any? { |x| !x.is_a?(String) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "header_string_array" must be a String if supplied',
          path: 'header_string_array'
        )
      end

      # local type check
      header_enum_array&.each { |x| validator_internal_errors.concat(validate_exhaustive_params_header_enum_array(x)) }

      # "non-local" type check
      if header_number_array.is_a?(Array) && header_number_array.any? { |x| !x.is_a?(Numeric) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "header_number_array" must be a Numeric if supplied',
          path: 'header_number_array'
        )
      end

      # "non-local" type check
      if header_integer_array.is_a?(Array) && header_integer_array.any? { |x| !x.is_a?(Integer) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "header_integer_array" must be a Integer if supplied',
          path: 'header_integer_array'
        )
      end

      # "non-local" type check
      if header_boolean_array.is_a?(Array) && header_boolean_array.any? { |x| !x.is_a?(TrueClass) && !x.is_a?(FalseClass) }
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: 'Each item in "header_boolean_array" must be a T::Boolean if supplied',
          path: 'header_boolean_array'
        )
      end

      # local type check
      if !body.nil?
        validator_internal_errors.concat(validate_exhaustive_params_body(body))
      end

      validator_internal_errors
    end

    sig do
      params(gizmo: BasketryExample::V1::Types::Gizmo).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_gizmo(gizmo)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(gizmo.id).nil? && !T.unsafe(gizmo.id).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"gizmo.id" must be a String if supplied',
          path: 'gizmo.id'
        )
      end

      # string-max-length
      if gizmo.id.is_a?(String) && T.must(gizmo.id).length > 30
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_MAX_LENGTH',
          title: '"gizmo.id" max length is 30',
          path: 'gizmo.id'
        )
      end

      # "non-local" type check
      if !T.unsafe(gizmo.name).nil? && !T.unsafe(gizmo.name).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"gizmo.name" must be a String if supplied',
          path: 'gizmo.name'
        )
      end

      # local type check
      if !gizmo.size.nil?
        validator_internal_errors.concat(validate_product_size(T.must(gizmo.size)))
      end

      validator_internal_errors
    end

    sig do
      params(widget: BasketryExample::V1::Types::Widget).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_widget(widget)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # required
      if T.unsafe(widget.id).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"widget.id" is required',
          path: 'widget.id'
        )
      end

      # "non-local" type check
      if !T.unsafe(widget.id).nil? && !T.unsafe(widget.id).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget.id" must be a String',
          path: 'widget.id'
        )
      end

      # string-max-length
      if widget.id.is_a?(String) && widget.id.length > 30
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_MAX_LENGTH',
          title: '"widget.id" max length is 30',
          path: 'widget.id'
        )
      end

      # "non-local" type check
      if !T.unsafe(widget.name).nil? && !T.unsafe(widget.name).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget.name" must be a String if supplied',
          path: 'widget.name'
        )
      end

      # string-max-length
      if widget.name.is_a?(String) && T.must(widget.name).length > 30
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_MAX_LENGTH',
          title: '"widget.name" max length is 30',
          path: 'widget.name'
        )
      end

      # string-pattern
      if widget.name.is_a?(String) && /[0-9a-fA-F]+/.match?(widget.name)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_PATTERN',
          title: '"widget.name" must match the pattern /[0-9a-fA-F]+/',
          path: 'widget.name'
        )
      end

      # required
      if T.unsafe(widget.fiz).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"widget.fiz" is required',
          path: 'widget.fiz'
        )
      end

      # "non-local" type check
      if !T.unsafe(widget.fiz).nil? && !T.unsafe(widget.fiz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget.fiz" must be a Numeric',
          path: 'widget.fiz'
        )
      end

      # number-multiple-of
      if widget.fiz.is_a?(Numeric) && widget.fiz % 3 != 0
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'NUMBER_MULTIPLE_OF',
          title: '"widget.fiz" must be a multiple of 3',
          path: 'widget.fiz'
        )
      end

      # "non-local" type check
      if !T.unsafe(widget.buzz).nil? && !T.unsafe(widget.buzz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget.buzz" must be a Numeric if supplied',
          path: 'widget.buzz'
        )
      end

      # number-multiple-of
      if widget.buzz.is_a?(Numeric) && T.must(widget.buzz) % 5 != 0
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'NUMBER_MULTIPLE_OF',
          title: '"widget.buzz" must be a multiple of 5',
          path: 'widget.buzz'
        )
      end

      # "non-local" type check
      if !T.unsafe(widget.fizbuzz).nil? && !T.unsafe(widget.fizbuzz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget.fizbuzz" must be a Numeric if supplied',
          path: 'widget.fizbuzz'
        )
      end

      # number-multiple-of
      if widget.fizbuzz.is_a?(Numeric) && T.must(widget.fizbuzz) % 15 != 0
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'NUMBER_MULTIPLE_OF',
          title: '"widget.fizbuzz" must be a multiple of 15',
          path: 'widget.fizbuzz'
        )
      end

      # local type check
      if !widget.foo.nil?
        validator_internal_errors.concat(validate_widget_foo(T.must(widget.foo)))
      end

      # local type check
      if !widget.size.nil?
        validator_internal_errors.concat(validate_product_size(T.must(widget.size)))
      end

      validator_internal_errors
    end

    sig do
      params(new_widget: BasketryExample::V1::Types::NewWidget).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_new_widget(new_widget)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(new_widget.name).nil? && !T.unsafe(new_widget.name).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"new_widget.name" must be a String if supplied',
          path: 'new_widget.name'
        )
      end

      # string-max-length
      if new_widget.name.is_a?(String) && T.must(new_widget.name).length > 30
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_MAX_LENGTH',
          title: '"new_widget.name" max length is 30',
          path: 'new_widget.name'
        )
      end

      # string-pattern
      if new_widget.name.is_a?(String) && /[0-9a-fA-F]+/.match?(new_widget.name)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'STRING_PATTERN',
          title: '"new_widget.name" must match the pattern /[0-9a-fA-F]+/',
          path: 'new_widget.name'
        )
      end

      # required
      if T.unsafe(new_widget.fiz).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"new_widget.fiz" is required',
          path: 'new_widget.fiz'
        )
      end

      # "non-local" type check
      if !T.unsafe(new_widget.fiz).nil? && !T.unsafe(new_widget.fiz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"new_widget.fiz" must be a Numeric',
          path: 'new_widget.fiz'
        )
      end

      # number-multiple-of
      if new_widget.fiz.is_a?(Numeric) && new_widget.fiz % 3 != 0
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'NUMBER_MULTIPLE_OF',
          title: '"new_widget.fiz" must be a multiple of 3',
          path: 'new_widget.fiz'
        )
      end

      # "non-local" type check
      if !T.unsafe(new_widget.buzz).nil? && !T.unsafe(new_widget.buzz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"new_widget.buzz" must be a Numeric if supplied',
          path: 'new_widget.buzz'
        )
      end

      # number-multiple-of
      if new_widget.buzz.is_a?(Numeric) && T.must(new_widget.buzz) % 5 != 0
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'NUMBER_MULTIPLE_OF',
          title: '"new_widget.buzz" must be a multiple of 5',
          path: 'new_widget.buzz'
        )
      end

      # "non-local" type check
      if !T.unsafe(new_widget.fizbuzz).nil? && !T.unsafe(new_widget.fizbuzz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"new_widget.fizbuzz" must be a Numeric if supplied',
          path: 'new_widget.fizbuzz'
        )
      end

      # number-multiple-of
      if new_widget.fizbuzz.is_a?(Numeric) && T.must(new_widget.fizbuzz) % 15 != 0
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'NUMBER_MULTIPLE_OF',
          title: '"new_widget.fizbuzz" must be a multiple of 15',
          path: 'new_widget.fizbuzz'
        )
      end

      # local type check
      if !new_widget.foo.nil?
        validator_internal_errors.concat(validate_new_widget_foo(T.must(new_widget.foo)))
      end

      # local type check
      if !new_widget.size.nil?
        validator_internal_errors.concat(validate_product_size(T.must(new_widget.size)))
      end

      validator_internal_errors
    end

    sig do
      params(gizmos_response: BasketryExample::V1::Types::GizmosResponse).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_gizmos_response(gizmos_response)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # required
      if T.unsafe(gizmos_response.data).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"gizmos_response.data" is required',
          path: 'gizmos_response.data'
        )
      end

      # local type check
      if !T.unsafe(gizmos_response.data).nil?
        gizmos_response.data.each { |x| validator_internal_errors.concat(validate_gizmo(x)) }
      end

      validator_internal_errors
    end

    sig do
      params(create_widget_body: BasketryExample::V1::Types::CreateWidgetBody).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_create_widget_body(create_widget_body)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # required
      if T.unsafe(create_widget_body.name).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"create_widget_body.name" is required',
          path: 'create_widget_body.name'
        )
      end

      # "non-local" type check
      if !T.unsafe(create_widget_body.name).nil? && !T.unsafe(create_widget_body.name).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"create_widget_body.name" must be a String',
          path: 'create_widget_body.name'
        )
      end

      validator_internal_errors
    end

    sig do
      params(exhaustive_params_body: BasketryExample::V1::Types::ExhaustiveParamsBody).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_body(exhaustive_params_body)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(exhaustive_params_body.foo).nil? && !T.unsafe(exhaustive_params_body.foo).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"exhaustive_params_body.foo" must be a String if supplied',
          path: 'exhaustive_params_body.foo'
        )
      end

      # "non-local" type check
      if !T.unsafe(exhaustive_params_body.bar).nil? && !T.unsafe(exhaustive_params_body.bar).is_a?(String)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"exhaustive_params_body.bar" must be a String if supplied',
          path: 'exhaustive_params_body.bar'
        )
      end

      validator_internal_errors
    end

    sig do
      params(widget_foo: BasketryExample::V1::Types::WidgetFoo).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_widget_foo(widget_foo)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(widget_foo.fiz).nil? && !T.unsafe(widget_foo.fiz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget_foo.fiz" must be a Numeric if supplied',
          path: 'widget_foo.fiz'
        )
      end

      # required
      if T.unsafe(widget_foo.buzz).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"widget_foo.buzz" is required',
          path: 'widget_foo.buzz'
        )
      end

      # "non-local" type check
      if !T.unsafe(widget_foo.buzz).nil? && !T.unsafe(widget_foo.buzz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"widget_foo.buzz" must be a Numeric',
          path: 'widget_foo.buzz'
        )
      end

      validator_internal_errors
    end

    sig do
      params(new_widget_foo: BasketryExample::V1::Types::NewWidgetFoo).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_new_widget_foo(new_widget_foo)
      validator_internal_errors = T.let([], T::Array[BasketryExample::V1::Types::ValidationError])

      # "non-local" type check
      if !T.unsafe(new_widget_foo.fiz).nil? && !T.unsafe(new_widget_foo.fiz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"new_widget_foo.fiz" must be a Numeric if supplied',
          path: 'new_widget_foo.fiz'
        )
      end

      # required
      if T.unsafe(new_widget_foo.buzz).nil?
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'REQUIRED',
          title: '"new_widget_foo.buzz" is required',
          path: 'new_widget_foo.buzz'
        )
      end

      # "non-local" type check
      if !T.unsafe(new_widget_foo.buzz).nil? && !T.unsafe(new_widget_foo.buzz).is_a?(Numeric)
        validator_internal_errors << BasketryExample::V1::Types::ValidationError.new(
          code: 'TYPE',
          title: '"new_widget_foo.buzz" must be a Numeric',
          path: 'new_widget_foo.buzz'
        )
      end

      validator_internal_errors
    end

    sig do
      params(create_gizmo_size: BasketryExample::V1::Enums::CreateGizmoSize).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_create_gizmo_size(create_gizmo_size)
      case T.unsafe(create_gizmo_size)
      when
        BasketryExample::V1::Enums::CreateGizmoSize::SMALL,
        BasketryExample::V1::Enums::CreateGizmoSize::MEDIUM,
        BasketryExample::V1::Enums::CreateGizmoSize::BIG,
        BasketryExample::V1::Enums::CreateGizmoSize::XL
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"create_gizmo_size" must be a member of `BasketryExample::V1::Enums::CreateGizmoSize`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(exhaustive_params_query_enum: BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_query_enum(exhaustive_params_query_enum)
      case T.unsafe(exhaustive_params_query_enum)
      when
        BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum::ONE,
        BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum::TWO,
        BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum::THREE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"exhaustive_params_query_enum" must be a member of `BasketryExample::V1::Enums::ExhaustiveParamsQueryEnum`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(exhaustive_params_query_enum_array: BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_query_enum_array(exhaustive_params_query_enum_array)
      case T.unsafe(exhaustive_params_query_enum_array)
      when
        BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray::ONE,
        BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray::TWO,
        BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray::THREE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"exhaustive_params_query_enum_array" must be a member of `BasketryExample::V1::Enums::ExhaustiveParamsQueryEnumArray`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(exhaustive_params_path_enum: BasketryExample::V1::Enums::ExhaustiveParamsPathEnum).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_path_enum(exhaustive_params_path_enum)
      case T.unsafe(exhaustive_params_path_enum)
      when
        BasketryExample::V1::Enums::ExhaustiveParamsPathEnum::ONE,
        BasketryExample::V1::Enums::ExhaustiveParamsPathEnum::TWO,
        BasketryExample::V1::Enums::ExhaustiveParamsPathEnum::THREE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"exhaustive_params_path_enum" must be a member of `BasketryExample::V1::Enums::ExhaustiveParamsPathEnum`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(exhaustive_params_path_enum_array: BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_path_enum_array(exhaustive_params_path_enum_array)
      case T.unsafe(exhaustive_params_path_enum_array)
      when
        BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray::ONE,
        BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray::TWO,
        BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray::THREE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"exhaustive_params_path_enum_array" must be a member of `BasketryExample::V1::Enums::ExhaustiveParamsPathEnumArray`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(exhaustive_params_header_enum: BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_header_enum(exhaustive_params_header_enum)
      case T.unsafe(exhaustive_params_header_enum)
      when
        BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum::ONE,
        BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum::TWO,
        BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum::THREE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"exhaustive_params_header_enum" must be a member of `BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnum`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(exhaustive_params_header_enum_array: BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_exhaustive_params_header_enum_array(exhaustive_params_header_enum_array)
      case T.unsafe(exhaustive_params_header_enum_array)
      when
        BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray::ONE,
        BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray::TWO,
        BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray::THREE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"exhaustive_params_header_enum_array" must be a member of `BasketryExample::V1::Enums::ExhaustiveParamsHeaderEnumArray`',
            path: '# TODO'
          ),
        ]
      end
    end

    sig do
      params(product_size: BasketryExample::V1::Enums::ProductSize).
        returns(T::Array[BasketryExample::V1::Types::ValidationError])
    end
    def validate_product_size(product_size)
      case T.unsafe(product_size)
      when
        BasketryExample::V1::Enums::ProductSize::SMALL,
        BasketryExample::V1::Enums::ProductSize::MEDIUM,
        BasketryExample::V1::Enums::ProductSize::LARGE
        []
      else
        [
          BasketryExample::V1::Types::ValidationError.new(
            code: 'ENUM',
            title: '"product_size" must be a member of `BasketryExample::V1::Enums::ProductSize`',
            path: '# TODO'
          ),
        ]
      end
    end
  end
end
